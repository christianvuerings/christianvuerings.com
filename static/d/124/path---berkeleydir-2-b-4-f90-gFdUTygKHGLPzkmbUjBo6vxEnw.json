{"data":{"site":{"siteMetadata":{"title":"Christian Vuerings","author":"Christian Vuerings"}},"markdownRemark":{"id":"edba1843-5679-5168-a8f5-d2eef9d1c271","excerpt":"Berkeleydir  enables you to easily find people in the Berkeley directory. ( code ) Why build something new? Currently the way to find people at UC Berkeley is…","html":"<p><a href=\"http://berkeleydir.herokuapp.com/\">Berkeleydir</a> enables you to easily find people in the Berkeley directory. (<a href=\"https://github.com/christianv/berkeleydir\">code</a>)</p>\n<h3>Why build something new?</h3>\n<p>Currently the way to find people at UC Berkeley is to use <a href=\"http://directory.berkeley.edu\">directory.berkeley.edu</a>. This service wasn’t that intuitive for me to use.</p>\n<ul>\n<li><strong>Slow searching</strong> - Sometimes I didn’t know the spelling of a name of someone (e.g. Jon or John). This required multiple searches where you have to keep clicking the back button.</li>\n<li><strong>Dropdown</strong> - It requires you to select what to search for in a certain format (e.g. <code class=\"language-text\">Vuerings, Christian</code>).</li>\n<li><strong>Non-mobile</strong> - Since it’s not responsive, using it on a mobile device was a pain.</li>\n</ul>\n<h3>Features</h3>\n<p>Aiming for a clean and intuitive design, it adds the following features:</p>\n<ul>\n<li><strong>Autocomplete</strong> - Searches as soon as you start typing.</li>\n<li><strong>Responsive</strong> - Works well on any device and resolution.</li>\n<li><strong>Search always available</strong> - Instead of having to click the back button for a new search, you can use the always available search input.</li>\n<li><strong>Search multiple properties</strong> - Currently searches for <em>uid</em>, <em>name</em> and <em>email</em>.</li>\n</ul>\n<h3>Technologies</h3>\n<ul>\n<li><strong><a href=\"https://www.firebase.com/\">Firebase</a></strong> to save the data</li>\n<li><strong><a href=\"http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\">LDAP</a></strong> for querying users</li>\n<li><strong><a href=\"http://angularjs.org/\">AngularJS</a></strong> in the front-end</li>\n<li>\n<p><strong><a href=\"http://nodejs.org/\">Node.js</a></strong> for crawling and exposing the API</p>\n<ul>\n<li><strong><a href=\"https://github.com/caolan/async\">Async</a></strong> which made it easier to handle asynchronous functions in Node.js.</li>\n<li><strong><a href=\"http://expressjs.com/\">Express</a></strong> a web application framework for node</li>\n<li><strong><a href=\"http://ldapjs.org/\">Ldap.js</a></strong> a LDAP library for Node.js</li>\n</ul>\n</li>\n</ul>\n<h3>Challenges</h3>\n<p><strong>Firebase querying</strong> - Setting up Firebase with AngularJS was pretty straightforward, but querying was somewhat of a pain. There’s currently <a href=\"http://stackoverflow.com/questions/11587775/database-style-queries-with-firebase\">no way to do database like queries with Firebase</a>.</p>\n<p><strong>Speed</strong> - Making it fast was of utter importance and the hardest part. In the beginning I loaded the more than 1,000,000 users in the browser. This made it extremely slow and not very scalable. Now it caches it in Node.js and provides 10 results at a time.</p>\n<p><strong>Scraping</strong> - In the first iteration I scraped the web version of the Berkeley directory at <a href=\"http://directory.berkeley.edu\">directory.berkeley.edu</a>. This was incredibly slow and took 40+ hours to complete. Now we use LDAP to get the data and takes approximately 1 hour to complete.</p>\n<p><strong>LDAP with <a href=\"http://nodejs.org/\">Node.js</a></strong> - Thanks to the <a href=\"https://wikihub.berkeley.edu/display/calnet/LDAP+-+Resources+for+Developers\">great documentation on the Berkeley LDAP service</a>, it was very straightforward to connect to it with <a href=\"http://linux.die.net/man/1/ldapsearch\">ldapsearch</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ldapsearch -H ldap://ldap.berkeley.edu -x -b &#39;ou=people,dc=berkeley,dc=edu&#39; objectclass=*</code></pre></div>\n<p>However, connecting to LDAP with <a href=\"http://ldapjs.org/\">ldapjs</a>, a great LDAP library for Node.js, proved to be a bit harder. Thanks to <a href=\"https://github.com/mcavage\">Mark Cavage</a> for explaining that <a href=\"http://stackoverflow.com/questions/20736327/ldapsearch-to-ldapjs-conversion/20748672#20748672\">ldapjs search scopes are backwards</a>. In the end, the only change was to set the <code class=\"language-text\">scope</code> to <code class=\"language-text\">sub</code> instead of using the default <code class=\"language-text\">base</code>.</p>\n<h3>Future</h3>\n<p>As with any project, there are always improvements to be made:</p>\n<ul>\n<li><strong>University API</strong> - Having a RESTful API for this on <a href=\"https://developer.berkeley.edu/\">developer.berkeley.edu</a>.</li>\n<li><strong>Images</strong> - Support for images. Already tried using <a href=\"http://gravatar.com\">gravatar</a> for this but almost no one at Berkeley has their email linked with the that service.</li>\n<li><strong>Infinite scroll</strong> - Currently it only shows 10 results per search.</li>\n</ul>\n<p>If you would like to make any changes yourself, feel free to make a pull request on <a href=\"https://github.com/christianv/berkeleydir\">christianv/berkeleydir</a>.</p>","frontmatter":{"title":"Berkeleydir","date":"January 09, 2014"}}},"pageContext":{"slug":"/berkeleydir/","previous":{"fields":{"slug":"/not-about-the-technology/"},"frontmatter":{"title":"It's Not About The Technology"}},"next":{"fields":{"slug":"/hub-supercharge-git/"},"frontmatter":{"title":"Hub - Supercharge Git"}}}}