{"data":{"site":{"siteMetadata":{"title":"Christian Vuerings","author":"Christian Vuerings"}},"markdownRemark":{"id":"4842fdd0-cb88-5a14-a16a-aff6cfedc8b9","excerpt":"Using  gulp.js  isn’t always straightforward. Here are a couple of tips to help you out. 1. Things don’t run in sequence With  gulp.js  tasks don’t run in the…","html":"<p>Using <a href=\"http://gulpjs.com/\">gulp.js</a> isn’t always straightforward. Here are a couple of tips to help you out.</p>\n<h3>1. Things don’t run in sequence</h3>\n<p>With <a href=\"http://gulpjs.com/\">gulp.js</a> tasks don’t run in the order you define them. In fact they run in concurrently to make the total execution faster.</p>\n<p>If you however want run tasks in order, you can define dependencies like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In previous versions of gulp, you should have used something like <a href=\"https://github.com/teambition/gulp-sequence\">gulp-sequence</a> or <a href=\"https://github.com/OverZealous/run-sequence\">run-sequence</a>.</p>\n<h3>2. Watch carefully</h3>\n<p>When you watch for changes in files, make sure to only watch the files that change on a regular basis.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Yes</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/js/**/*.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// No</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**/*.*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Otherwise running the <code class=\"language-text\">gulp</code> task in the command line will result in a slower tasks and high CPU / memory usage.</p>\n<h3>3. Gulp-inject</h3>\n<p>After concatenating and minifying CSS and JavaScript files, I wanted to find a way to dynamically add those files to the HTML page. <a href=\"https://github.com/klei/gulp-inject\">gulp-inject</a> was the plug-in that did the trick for me.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Make sure all the previous tasks (concatenation / minification) are run first</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fonts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> inject <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-inject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Read = false will not read the file contents and make the task faster</span>\n    <span class=\"token keyword\">var</span> sources <span class=\"token operator\">=</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>paths<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        read<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> target\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Do not add a root slash to the beginning of the path</span>\n        addRootSlash<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// Remove the `public` from the path when doing the injection</span>\n        ignorePath<span class=\"token punctuation\">:</span> <span class=\"token string\">'public'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And this is the <code class=\"language-text\">html</code> part:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- inject:js --></span>\n    <span class=\"token comment\">&lt;!-- endinject --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Next to <code class=\"language-text\">html</code>, it also <a href=\"https://github.com/klei/gulp-inject/blob/b8618337e09ece47d8e89cf56e5b2c1c248208bd/README.md#injecttransform\">supports</a> <code class=\"language-text\">jade</code>, <code class=\"language-text\">jsx</code>, <code class=\"language-text\">slm</code> and <code class=\"language-text\">haml</code>.</p>\n<h3>4. Using bower?</h3>\n<p>When you’re using <a href=\"http://bower.io/\">bower</a> to manage your dependencies, <a href=\"https://github.com/ck86/main-bower-files\">main-bower-files</a> will come in handy. Otherwise you’ll have to manually define which bower files you want to include.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mainBowerFiles <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main-bower-files'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> paths <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  src<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    js<span class=\"token punctuation\">:</span> <span class=\"token function\">mainBowerFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// Set the base path for your bower components</span>\n      base<span class=\"token punctuation\">:</span> <span class=\"token string\">'./bower_components'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// Only return the JavaScript files</span>\n      filter<span class=\"token punctuation\">:</span> <span class=\"token regex\">/.*\\.js$/i</span>\n\n    <span class=\"token comment\">// Concatenate the bower files with your own</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'src/js/**/*.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. Node + browsersync: possible but cumbersome</h3>\n<p>One of the most tedious parts was finding a way to make gulp work with <a href=\"https://github.com/remy/nodemon\">nodemon</a> (automatically restart node) and <a href=\"http://www.browsersync.io/\">BrowserSync</a>. The <a href=\"https://github.com/sogko/gulp-recipes/blob/master/browser-sync-nodemon-expressjs/gulpfile.js\">gulpfile</a> from <a href=\"https://github.com/sogko\">Hafiz Ismail</a> was a great start and I made some small changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nodemon'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nodemon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-nodemon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We use this `called` variable to make sure the callback is only executed once</span>\n  <span class=\"token keyword\">var</span> called <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">nodemon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    script<span class=\"token punctuation\">:</span> <span class=\"token string\">'server.js'</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'server.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'server/**/*.*'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>called<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    called <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'restart'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onRestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Also reload the browsers after a slight delay</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      browserSync<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        stream<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make sure `nodemon` is started before running `browser-sync`.</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'browser-sync'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nodemon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n  browserSync<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// All of the following files will be watched</span>\n    files<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'public/**/*.*'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Tells BrowserSync on where the express app is running</span>\n    proxy<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:'</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// This port should be different from the express app port</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Which browser should we launch?</span>\n    browser<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'google chrome'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>Hope you all taken something away from this post, if you have any remarks / comments, feel free to <a href=\"https://twitter.com/christianvuer\">contact me on twitter</a>.</p>","frontmatter":{"title":"5 Lessons Learned Using gulp.js","date":"December 29, 2014"}}},"pageContext":{"slug":"/5-lessons-learned-using-gulpjs/","previous":{"fields":{"slug":"/hub-supercharge-git/"},"frontmatter":{"title":"Hub - Supercharge Git"}},"next":{"fields":{"slug":"/goals-interests-for-2015/"},"frontmatter":{"title":"Goals & Interests for 2015"}}}}